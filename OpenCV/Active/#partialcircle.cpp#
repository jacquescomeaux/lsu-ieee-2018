
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <vector>
#include <iostream>


int main(int argc, char* argv[])
{
  int Y1 = 150;
  int X1 = 195;
  int X2 = 440;
  
  std::vector<cv::Point2f> pts1, pts2;
  
  pts1.push_back(cv::Point2f(92,0));
  pts1.push_back(cv::Point2f(148,0));
  pts1.push_back(cv::Point2f(74,283));
  pts1.push_back(cv::Point2f(178,283));
  
  pts2.push_back(cv::Point2f(74,0));
  pts2.push_back(cv::Point2f(140,0));
  pts2.push_back(cv::Point2f(74,283));
  pts2.push_back(cv::Point2f(140,283));
  
  cv::VideoCapture cam(1);
  while(true) {
    double t = cv::getTickCount();
    cv::Mat image, img;
    cam >> image;
    img = image(cv::Rect(X1, Y1, X2-X1, 283)); //crop
    cv::Mat M = cv::getPerspectiveTransform(pts1, pts2);
    cv::warpPerspective(img, img, M, img.size());

    cv::Mat canny;

    cv::Mat gray;
    cv::Mat grayBI;
    /// Convert it to gray
    cv::cvtColor(img, gray, CV_BGR2GRAY );

    cv::bilateralFilter(gray, grayBI, 5, 75, 75);

    // compute canny (don't blur with that image quality!!)
    cv::Canny(grayBI, canny, 200,20); //prev 200, 20
    cv::namedWindow("canny2"); cv::imshow("canny2", canny>0);
    cv::namedWindow("BLUR"); cv::imshow("BLUR", grayBI>0);

    std::vector<cv::Vec3f> circles;

    /// Apply the Hough Transform to find the circles
    cv::HoughCircles( gray, circles, CV_HOUGH_GRADIENT, 2, 300, 50, 100, 50, 90 );

    /// Draw the circles detected
    for( size_t i = 0; i < circles.size(); i++ ) 
    {
        cv::Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
        int radius = cvRound(circles[i][2]);
        cv::circle( img, center, 3, cv::Scalar(0,255,255), -1);
        cv::circle( img, center, radius, cv::Scalar(0,0,255), 1 );
    }

    //compute distance transform:
    cv::Mat dt;
    cv::distanceTransform(255-(canny>0), dt, CV_DIST_L2 ,3);
    //cv::namedWindow("distance transform"); cv::imshow("distance transform", dt/255.0f);

    // test for semi-circles:
    float minInlierDist = 2.0f;
    for( size_t i = 0; i < circles.size(); i++ ) 
    {
        // test inlier percentage:
        // sample the circle and check for distance to the next edge
        unsigned int counter = 0;
        unsigned int inlier = 0;

        cv::Point2f center((circles[i][0]), (circles[i][1]));
        float radius = (circles[i][2]);

        // maximal distance of inlier might depend on the size of the circle
        float maxInlierDist = radius/25.0f;
        if(maxInlierDist<minInlierDist) maxInlierDist = minInlierDist;

        //TODO: maybe paramter incrementation might depend on circle size!
        for(float t =0; t<2*3.14159265359f; t+= 0.1f) 
        {
            counter++;
            float cX = radius*cos(t) + circles[i][0];
            float cY = radius*sin(t) + circles[i][1];

            if(dt.at<float>(cY,cX) < maxInlierDist) 
            {
                inlier++;
                cv::circle(img, cv::Point2i(cX,cY),3, cv::Scalar(0,255,0));
            } 
           else
                cv::circle(img, cv::Point2i(cX,cY),3, cv::Scalar(255,0,0));
        }
        std::cout << 100.0f*(float)inlier/(float)counter << " % of a circle with radius " << radius << " detected" << std::endl;
    }
    
    t = (cv::getTickCount() - t)/cv::getTickFrequency();
    std::cout << "Time: " << t << std::endl;

    cv::namedWindow("output"); cv::imshow("output", img);
    //cv::imwrite("houghLinesComputed.png", color);

    cv::waitKey(25);
    //return 0;
  }
}
